controller :  HTTP요청에 대한 응답을 처리할 수 있는 클래스
RestController : controller인데 응답으로 데이터 객체만 처리함 
Redux saga - 리덕스 미들웨어 중에서 대표적으로 가장 많이 쓰는 것
 redux side effect manager
=리덕스의 사이드이펙트 관리자
=리덕스의 사이드 이펙트? 
-> 리덕스 상태를 변경하기 이전/이후에 처리해야하는 추가적인 로직(사이드이펙트)
	: Redux 상태변경 이전
	  -> 처리중입니다, 뺑글이(spinner), 막대바(progress) 표시
	  -> 주로 서버와의 통신(비동기) - 데이터베이스 저장
	  -> 로컬스토리지, indexDb와 같은 브라우저 스토리지 처리
	  -> 파일처리(비동기)
	 :Redux 상태변경 이후 또는 에러
	  ->처리중입니다....해체
	  -> 에러가 있다면 에러메시지 표시

//Redux 상태 Persistence Strategy(영속화 전략) : RAM(휘발성) -> 디스크(비휘발성)

//웹
1. Redux 상태를 브라우저 저장공간 저장(로컬스토리지, indexedDB)
2. Redux 상태를 서버를 통해서 원격에 있는 데이터 베이스에 저장
//모바일앱
3.Redux 상태를 모바일 장치의 디스크에 저장(asyncStorage)
//PC
4.Redux 상태를 PC장치의 디스크(file)또는 내장 데이터베이스(sqlLite)저장

1. Asynchronous(비동기적인 작업)
-> 비동기적인 처리작업의 직렬화(Serialization) : 작업의 순서를 보장할 수 있도록 함

// Saga Pattern : 작업(Task, Transaction)의 처리 순서를 보장하기 위한 아키텍쳐
  예) 작업을 queue에 넣고 먼저 들어온 작업이 다음 작업을 실행

//es-6(generator)
yield todoApi.modify(...)
yield userApi.add(...)
yield profileApi.modify(...)

//es-8
async function saveTodo(){
await todoApi.modify(...)
await userApi.add(...)
await profileApi.modify(...)
}
Promise객체는 상태가 3개
: "pending","fullfilled","rejected"
-----------------------------------------
//디스패쳐에 추가하라는 메시지를 보낸 것
dispatch(addPhoto(item))
history.push("/photos");
--------------------------------------